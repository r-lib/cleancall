[{"path":[]},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-lib.github.io/cleancall/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-lib.github.io/cleancall/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to cleancall","title":"Contributing to cleancall","text":"outlines propose change cleancall. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://r-lib.github.io/cleancall/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to cleancall","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://r-lib.github.io/cleancall/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to cleancall","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://r-lib.github.io/cleancall/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to cleancall","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://r-lib.github.io/cleancall/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to cleancall","text":"Please note cleancall project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://r-lib.github.io/cleancall/CONTRIBUTING.html","id":"see-tidyverse-development-contributing-guide","dir":"","previous_headings":"","what":"See tidyverse development contributing guide","title":"Contributing to cleancall","text":"details.","code":""},{"path":"https://r-lib.github.io/cleancall/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lionel Henry. Author. Gábor Csárdi. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://r-lib.github.io/cleancall/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Henry L, Csárdi G (2023). cleancall: C Resource Cleanup via Exit Handlers. R package version 0.1.3,  https://r-lib.github.io/cleancall/, https://github.com/r-lib/cleancall#readme.","code":"@Manual{,   title = {cleancall: C Resource Cleanup via Exit Handlers},   author = {Lionel Henry and Gábor Csárdi},   year = {2023},   note = {R package version 0.1.3,  https://r-lib.github.io/cleancall/},   url = {https://github.com/r-lib/cleancall#readme}, }"},{"path":"https://r-lib.github.io/cleancall/index.html","id":"cleancall","dir":"","previous_headings":"","what":"C Resource Cleanup via Exit Handlers","title":"C Resource Cleanup via Exit Handlers","text":"C Resource Cleanup via Exit Handlers","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"C Resource Cleanup via Exit Handlers","text":"Add exit handlers .Call() C, via call_with_cleanup() wrapper. Restrict exit handler run early exit (error, interrupt, debugger exit, restart invokation, condition caught, etc.). .e. anything prevented function running normal course. Exit handlers executed reverse order. Last added runs first. Exit handlers can added downstream function, don’t need called directly function called call_with_cleanup().","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"limitations","dir":"","previous_headings":"","what":"Limitations","title":"C Resource Cleanup via Exit Handlers","text":"suggest exit handlers kept simple fast possible. particular, errors (early exits) triggered exit handlers caught currently. exit handler exits early others run. issue, can wrap exit handler R_tryCatch() (available R 3.4.0 later).","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"C Resource Cleanup via Exit Handlers","text":"can install released version cleancall CRAN :","code":"install.packages(\"cleancall\")"},{"path":"https://r-lib.github.io/cleancall/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"C Resource Cleanup via Exit Handlers","text":"example processx package. processx_wait() function waits external process end, wait interruptible. processx_wait() opens two temporary file descriptors wait, need closed end function, even interrupt, otherwise resource leak. See link complete function, fixing. include relevant parts: pipe() allocates two file descriptors, saved handle->waitpipe[0] handle->waitpipe[1]. wait interruptible, function calls R_CheckUserInterrupt(). checks CTRL+C ESC interrupt, one, returns directly caller .Call(). course problematic, processx_wait() chance closing pipe file descriptors. Fixing cleancall follows. First package needs depend cleancall, update DESCRIPTION: R code calling processx_wait(), replace .Call() cleancall::call_with_cleanup(): include cleancall.h header C code, use r_call_on_exit() push cleanup handler stack foreign call: can see whole fix commit message GitHub. See also blog post https://www.tidyverse.org/articles/2019/05/resource-cleanup--c---r-api/ Note cleanup functions generally assume stack-allocated data still around time called. usually problem since cleanup mostly objects allocated heap non-automatic storage. needed, can protect stack-allocated data unwound using r_with_cleanup_context(). becomes point cleanup functions called, ensures object allocated stack point still around.","code":"SEXP processx_wait(SEXP status, SEXP timeout) {   processx_handle_t *handle = R_ExternalPtrAddr(status);   int ctimeout = INTEGER(timeout)[0], timeleft = ctimeout;   struct pollfd fd;   int ret = 0;   pid_t pid;    [...]    /* Setup the self-pipe that we can poll */   if (pipe(handle->waitpipe)) {     processx__unblock_sigchld();     error(\"processx error: %s\", strerror(errno));   }    [...]    while (ctimeout < 0 || timeleft > PROCESSX_INTERRUPT_INTERVAL) {     do {       ret = poll(&fd, 1, PROCESSX_INTERRUPT_INTERVAL);     } while (ret == -1 && errno == EINTR);      /* If not a timeout, then we are done */     if (ret != 0) break;      R_CheckUserInterrupt();      [...]   }    [...]  cleanup:   if (handle->waitpipe[0] >= 0) close(handle->waitpipe[0]);   if (handle->waitpipe[1] >= 0) close(handle->waitpipe[1]);   handle->waitpipe[0] = -1;   handle->waitpipe[1] = -1;    return ScalarLogical(ret != 0); } [...] Imports:     cleancall, LinkingTo:     cleancall [...] cleancall::call_with_cleanup(c_processx_wait, private$status,                              as.integer(timeout)) #include <cleancall.h>  [...]  static void processx__close_fd(void *ptr) {   int *fd = ptr;   if (*fd >= 0) close(*fd); }  SEXP processx_wait(SEXP status, SEXP timeout) {   processx_handle_t *handle = R_ExternalPtrAddr(status);    [...]    if (pipe(handle->waitpipe)) {     processx__unblock_sigchld();     error(\"processx error: %s\", strerror(errno));   }   r_call_on_exit(processx__close_fd, handle->waitpipe);   r_call_on_exit(processx__close_fd, handle->waitpipe + 1);    [...] }"},{"path":[]},{"path":"https://r-lib.github.io/cleancall/index.html","id":"void-r_call_on_exitvoid-fnvoid-data-void-data","dir":"","previous_headings":"Usage","what":"void r_call_on_exit(void (*fn)(void* data), void *data)","title":"C Resource Cleanup via Exit Handlers","text":"Push exit handler stack. exit handler always executed, .e. normal early exits. Exit handlers executed right function called call_with_cleanup() exits. (function used r_with_cleanup_context(), cleanup context established C.) Exit handlers executed reverse order (last first , LIFO). Exit handlers pushed r_call_on_exit() r_call_on_early_exit() share stack. Best practice use function immediately acquiring resource, appropriate cleanup function resource.","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"void-r_call_on_early_exitvoid-fnvoid-data-void-data","dir":"","previous_headings":"Usage","what":"void r_call_on_early_exit(void (*fn)(void* data), void *data)","title":"C Resource Cleanup via Exit Handlers","text":"Push exit handler stack. exit handler executed early exists, normal termination. Exit handlers executed right function called call_with_cleanup() exits. (function used r_with_cleanup_context(), cleanup context established C.) Exit handlers executed reverse order (last first , LIFO). Exit handlers pushed r_call_on_exit() r_call_on_early_exit() share stack. Best practice use function immediately acquiring resource, appropriate cleanup function resource.","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"sexp-r_with_cleanup_contextsexp-fnvoid-data-void-data","dir":"","previous_headings":"Usage","what":"SEXP r_with_cleanup_context(SEXP (*fn)(void* data), void* data)","title":"C Resource Cleanup via Exit Handlers","text":"Establish cleanup stack call fn data. function can used establish cleanup stack C code.","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"embedding-cleancall","dir":"","previous_headings":"","what":"Embedding cleancall","title":"C Resource Cleanup via Exit Handlers","text":"don’t want depend cleancall package, can also easily embed cleancall code package. steps need : Copy cleancall.R file package, R/ directory. Copy cleancall.h cleancall.c files package, src/. Makevars /Makevars.win file, define OBJECTS , add cleancall.o OBJECTS. Use CLEANCALL_METHOD_RECORD macro registration C functions. E.g. Add call package init function: Use call_with_cleanup() instead .Call() C functions want add cleanup code . Add r_call_on_exit() etc. calls C function(s). example pull request embeds cleancall processx: https://github.com/r-lib/processx/pull/238 (pull request slightly complicated minimal example, uses wrapper .Call already.)","code":"#include \"cleancall.h\" [...] static const R_CallMethodDef callMethods[]  = {   CLEANCALL_METHOD_RECORD,   [...]   { NULL, NULL, 0 } }; cleancall_init();"},{"path":"https://r-lib.github.io/cleancall/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"C Resource Cleanup via Exit Handlers","text":"Please note cleancall project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://r-lib.github.io/cleancall/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"C Resource Cleanup via Exit Handlers","text":"MIT @ RStudio","code":""},{"path":"https://r-lib.github.io/cleancall/reference/call_with_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Call a native routine within an exit context — call_with_cleanup","title":"Call a native routine within an exit context — call_with_cleanup","text":"C functions called way can call r_call_on_exit() /r_call_on_early_exit() functions establish exit handlers.","code":""},{"path":"https://r-lib.github.io/cleancall/reference/call_with_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call a native routine within an exit context — call_with_cleanup","text":"","code":"call_with_cleanup(ptr, ...)"},{"path":"https://r-lib.github.io/cleancall/reference/call_with_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call a native routine within an exit context — call_with_cleanup","text":"ptr native pointer object. ... Arguments native routine. Handlers installed via r_call_on_exit() always executed exit. Handlers installed via r_call_on_early_exit() executed early exit, .e. normal termination.","code":""},{"path":"https://r-lib.github.io/cleancall/reference/call_with_cleanup.html","id":"c-api","dir":"Reference","previous_headings":"","what":"C API","title":"Call a native routine within an exit context — call_with_cleanup","text":"void r_call_on_exit(void (*fn)(void* data), void *data) Push exit handler stack. exit handler always executed, .e. normal early exits. Exit handlers executed right function called call_with_cleanup() exits. (function used r_with_cleanup_context(), cleanup context established C.) Exit handlers executed reverse order (last first , LIFO). Exit handlers pushed r_call_on_exit() r_call_on_early_exit() share stack. Best practice use function immediately acquiring resource, appropriate cleanup function resource. void r_call_on_early_exit(void (*fn)(void* data), void *data) Push exit handler stack. exit handler executed early exists, normal termination. Exit handlers executed right function called call_with_cleanup() exits. (function used r_with_cleanup_context(), cleanup context established C.) Exit handlers executed reverse order (last first , LIFO). Exit handlers pushed r_call_on_exit() r_call_on_early_exit() share stack. Best practice use function immediately acquiring resource, appropriate cleanup function resource. SEXP r_with_cleanup_context(SEXP (*fn)(void* data), void* data) Establish cleanup stack call fn data. function can used establish cleanup stack C code.","code":""},{"path":[]},{"path":"https://r-lib.github.io/cleancall/reference/cleancall-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cleancall: C Resource Cleanup via Exit Handlers — cleancall-package","title":"cleancall: C Resource Cleanup via Exit Handlers — cleancall-package","text":"Wrapper .Call() runs exit handlers clean C resources. Helps managing C (non-R) resources using R API.","code":""},{"path":[]},{"path":"https://r-lib.github.io/cleancall/reference/cleancall-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cleancall: C Resource Cleanup via Exit Handlers — cleancall-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com (ORCID) Authors: Lionel Henry lionel@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://r-lib.github.io/cleancall/news/index.html","id":"cleancall-013","dir":"Changelog","previous_headings":"","what":"cleancall 0.1.3","title":"cleancall 0.1.3","text":"CRAN release: 2022-10-26 user visible changes.","code":""},{"path":"https://r-lib.github.io/cleancall/news/index.html","id":"cleancall-012","dir":"Changelog","previous_headings":"","what":"cleancall 0.1.2","title":"cleancall 0.1.2","text":"CRAN release: 2022-03-10 Fix ABI compatibility pre post R 4.0.1 versions. Now CRAN builds (R 4.0.2 later 4.0.x) work well R 4.0.0. cleancall now better supports embedding another R package, see ‘Embedding cleancall’ section README details.","code":""},{"path":"https://r-lib.github.io/cleancall/news/index.html","id":"cleancall-011","dir":"Changelog","previous_headings":"","what":"cleancall 0.1.1","title":"cleancall 0.1.1","text":"CRAN release: 2020-01-11 Fix compilation errors -fno-common.","code":""},{"path":"https://r-lib.github.io/cleancall/news/index.html","id":"cleancall-010","dir":"Changelog","previous_headings":"","what":"cleancall 0.1.0","title":"cleancall 0.1.0","text":"CRAN release: 2019-05-20 First public release","code":""}]
